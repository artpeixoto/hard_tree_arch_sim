use crate::application::simulation::cpu_registers::CpuRegisterAddress;

#[derive(Clone, PartialEq, Eq, Debug, Copy)]
pub enum MovInput {
    Source(CpuRegisterAddress),
    // SourceAddr(CpuRegisterAddress),
}

#[derive(Clone, PartialEq, Eq, Debug, Copy)]
pub enum AluOperation {
    NoOp,
    Eq {
        activation_input    : CpuRegisterAddress,
        activation_output   : Option<CpuRegisterAddress>,
        data_input_0        : CpuRegisterAddress,
        data_input_1        : CpuRegisterAddress,
        data_output         : CpuRegisterAddress,
    },
    // Mov {
    //     activation_input    : CpuRegisterAddress,
    //     value_input         : CpuRegisterAddress,
    //     // address_input       : MovInput,
    //     data_output         : CpuRegisterAddress,
    //     activation_output   : Option<CpuRegisterAddress>,
    // },
    Latch {
        activation_input  : CpuRegisterAddress,
        data_input        : CpuRegisterAddress,
        hold_input        : CpuRegisterAddress,
        data_output       : CpuRegisterAddress,
        activation_output : Option<CpuRegisterAddress>,
    },
    Not {
        activation_input    : CpuRegisterAddress,
        data_input          : CpuRegisterAddress,
        data_output         : CpuRegisterAddress,
        activation_output   : Option<CpuRegisterAddress>,
    },
    And {
        activation_input  : CpuRegisterAddress,
        data_input_0            : CpuRegisterAddress,
        data_input_1            : CpuRegisterAddress,
        data_output_0        : CpuRegisterAddress,
        activation_output : Option<CpuRegisterAddress>,
    },
    Or {
        activation_input  : CpuRegisterAddress,
        data_input_0            : CpuRegisterAddress,
        data_input_1            : CpuRegisterAddress,
        data_output_0        : CpuRegisterAddress,
        activation_output : Option<CpuRegisterAddress>,
    },
    Xor {
        activation_input  : CpuRegisterAddress,
        data_input_1            : CpuRegisterAddress,
        data_input_0            : CpuRegisterAddress,
        data_output_0        : CpuRegisterAddress,
        activation_output : Option<CpuRegisterAddress>,
    },
    ShiftLeft {
        activation_input  : CpuRegisterAddress,
        value                   : CpuRegisterAddress,
        shift_count             : CpuRegisterAddress,
        data_output_0        : CpuRegisterAddress,
        activation_output : Option<CpuRegisterAddress>,
    },
    ShiftRight {
        activation_input: CpuRegisterAddress,
        value: CpuRegisterAddress,
        shift_count: CpuRegisterAddress,
        data_output_0: CpuRegisterAddress,
        activation_output: Option<CpuRegisterAddress>,
    },
    SelectPart {
        activation_input: CpuRegisterAddress,
        data_input: CpuRegisterAddress,
        selection_input: CpuRegisterAddress,
        data_output_0: CpuRegisterAddress,
        activation_output: Option<CpuRegisterAddress>,
    },
    Add {
        activation_input  : CpuRegisterAddress,
        data_input_1            : CpuRegisterAddress,
        data_input_0            : CpuRegisterAddress,
        data_output_0        : CpuRegisterAddress,
        flags_output            : Option<CpuRegisterAddress>,
        activation_output : Option<CpuRegisterAddress>,
    },
    Sub {
        activation_input    : CpuRegisterAddress,
        data_input_1        : CpuRegisterAddress,
        data_input_0        : CpuRegisterAddress,
        data_output_0       : CpuRegisterAddress,
        flags_output        : Option<CpuRegisterAddress>,
        activation_output   : Option<CpuRegisterAddress>,
    },
    Mul {
        activation_input: CpuRegisterAddress,
        data_input_1: CpuRegisterAddress,
        data_input_0: CpuRegisterAddress,
        first_word_output: CpuRegisterAddress,
        second_word_output: Option<CpuRegisterAddress>,
        activation_output: Option<CpuRegisterAddress>,
    },
    Div {
        activation_input: CpuRegisterAddress,
        dividend: CpuRegisterAddress,
        divisor: CpuRegisterAddress,
        data_output_0: CpuRegisterAddress,
        div_by_zero_flag_output: Option<CpuRegisterAddress>,
        activation_output: Option<CpuRegisterAddress>,
    },
    Rem {
        activation_input  : CpuRegisterAddress,
        dividend: CpuRegisterAddress,
        divisor: CpuRegisterAddress,
        data_output_0        : CpuRegisterAddress,
        div_by_zero_flag_output : Option<CpuRegisterAddress>,
        activation_output : Option<CpuRegisterAddress>,
    },

    Neg {
        activation_input: CpuRegisterAddress,
        input: CpuRegisterAddress,
        data_output_0: CpuRegisterAddress,
        activation_output: Option<CpuRegisterAddress>,
    },

    ReadFromMem {
        activation_input: CpuRegisterAddress,
        data_input_0: CpuRegisterAddress,
        data_output_0: CpuRegisterAddress,
        activation_output: Option<CpuRegisterAddress>,
    },
    WriteToMem {
        activation_input  : CpuRegisterAddress,
        address_input           : CpuRegisterAddress,
        data_input              : CpuRegisterAddress,
        activation_output : Option<CpuRegisterAddress>,
    },
}
pub struct AluPortsConfig {
    pub data_input_0    : Option<CpuRegisterAddress>,
    pub data_input_1    : Option<CpuRegisterAddress>,
    pub activation_input: Option<CpuRegisterAddress>,
    pub data_output_0    : Option<CpuRegisterAddress>,
    pub data_output_1    : Option<CpuRegisterAddress>,
    pub activation_output: Option<CpuRegisterAddress>,
}
impl AluOperation {
    pub fn get_ports_config(&self) -> AluPortsConfig {
        match self.clone() {
            AluOperation::NoOp => AluPortsConfig {
                data_input_0: None,
                data_input_1: None,
                activation_input: None,
                data_output_0: None,
                data_output_1: None,
                activation_output: None,
            },

            AluOperation::Eq {
                activation_input,
                activation_output,
                data_input_0,
                data_input_1,
                data_output: data_output_0,
            } => AluPortsConfig {
                data_input_0: Some(data_input_0),
                data_input_1: Some(data_input_1),
                activation_input: Some(activation_input),
                data_output_0: Some(data_output_0),
                data_output_1: None,
                activation_output,
            },

            // AluOperation::Mov {
            //     activation_input,
            //     activation_output,
            //     address_input,
            //     data_output: output,
            // } => AluPortsConfig {
            //     data_input_0: Some(match address_input{
            //         MovInput::Source(src) => src,
            //         MovInput::SourceAddr(addr_src) => addr_src
            //     }),
            //     data_input_1: None,
            //     activation_input: Some(activation_input),
            //     data_output_0: Some(output),
            //     data_output_1: None,
            //     activation_output: activation_output,
            // },

            AluOperation::Latch {
                activation_input, data_input, hold_input, data_output, activation_output
            } => AluPortsConfig {
                data_input_0: Some(data_input),
                data_input_1: Some(hold_input),
                activation_input: Some(activation_input),
                data_output_0: Some(data_output),
                data_output_1: None,
                activation_output,
            },
            AluOperation::Not {
                activation_input,
                data_input: data_input_0,
                data_output: data_output_0,
                activation_output,
            } => AluPortsConfig{
                data_input_0: Some(data_input_0),
                data_input_1: None,
                activation_input: Some(activation_input),
                data_output_0: Some(data_output_0),
                data_output_1: None,
                activation_output:activation_output,
            },
            AluOperation::And {
                activation_input,
                data_input_1,
                data_input_0,
                data_output_0,
                activation_output,
            } => AluPortsConfig {
                data_input_0: Some(data_input_0),
                data_input_1: Some(data_input_1),
                activation_input: Some(activation_input),
                data_output_0: Some(data_output_0),
                data_output_1: None,
                activation_output: activation_output,
            },
            AluOperation::Or {
                activation_input,
                data_input_1,
                data_input_0,
                data_output_0,
                activation_output,
            } => AluPortsConfig {
                data_input_0: Some(data_input_0),
                data_input_1        : Some(data_input_1),
                activation_input    : Some(activation_input),
                data_output_0: Some(data_output_0),
                data_output_1: None,
                activation_output: activation_output,
            },
            AluOperation::Xor {
                activation_input,
                data_input_1,
                data_input_0,
                data_output_0,
                activation_output,
            } => AluPortsConfig {
                data_input_0: Some(data_input_0),
                data_input_1: Some(data_input_1),
                activation_input: Some(activation_input),
                data_output_0: Some(data_output_0),
                data_output_1: None,
                activation_output: activation_output,
            },
            AluOperation::ShiftLeft {
                activation_input,
                value,
                shift_count,
                data_output_0,
                activation_output,
            } => AluPortsConfig {
                data_input_0: Some(value),
                data_input_1: Some(shift_count),
                activation_input: Some(activation_input),
                data_output_0: Some(data_output_0),
                data_output_1: None,
                activation_output: activation_output,
            },
            AluOperation::ShiftRight {
                activation_input,
                value,
                shift_count,
                data_output_0,
                activation_output,
            } => AluPortsConfig {
                data_input_0: Some(value),
                data_input_1: Some(shift_count),
                activation_input: Some(activation_input),
                data_output_0: Some(data_output_0),
                data_output_1: None,
                activation_output: activation_output,
            },
            AluOperation::SelectPart {
                activation_input,
                data_input: data_input_1,
                selection_input: data_input_0,
                data_output_0,
                activation_output,
            } => AluPortsConfig {
                data_input_0: Some(data_input_0),
                data_input_1: Some(data_input_1),
                activation_input: Some(activation_input),
                data_output_0: Some(data_output_0),
                data_output_1: None,
                activation_output: activation_output,
            },
            AluOperation::Add {
                activation_input,
                data_input_1,
                data_input_0,
                data_output_0,
                flags_output,
                activation_output,
            } => AluPortsConfig {
                data_input_0: Some(data_input_0),
                data_input_1: Some(data_input_1),
                activation_input: Some(activation_input),
                data_output_0: Some(data_output_0),
                data_output_1: flags_output,
                activation_output: activation_output,
            },
            AluOperation::Sub {
                activation_input,
                data_input_1,
                data_input_0,
                data_output_0,
                flags_output,
                activation_output,
            } => AluPortsConfig {
                data_input_0: Some(data_input_0),
                data_input_1: Some(data_input_1),
                activation_input: Some(activation_input),
                data_output_0: Some(data_output_0),
                data_output_1: flags_output,
                activation_output: activation_output,
            },
            AluOperation::Mul {
                activation_input,
                data_input_1,
                data_input_0,
                first_word_output: data_output_0,
                second_word_output,
                activation_output,
            } => AluPortsConfig {
                data_input_0: Some(data_input_0),
                data_input_1: Some(data_input_1),
                activation_input: Some(activation_input),
                data_output_0: Some(data_output_0),
                data_output_1: second_word_output,
                activation_output: activation_output,
            },
            AluOperation::Div {
                activation_input,
                divisor: data_input_1,
                dividend: data_input_0,
                data_output_0,
                div_by_zero_flag_output: div_by_zero_output,
                activation_output,
            } => AluPortsConfig {
                data_input_0: Some(data_input_0),
                data_input_1: Some(data_input_1),
                activation_input: Some(activation_input),
                data_output_0: Some(data_output_0),
                data_output_1: div_by_zero_output,
                activation_output: activation_output,
            },
            AluOperation::Rem {
                activation_input,
                divisor: data_input_1,
                dividend: data_input_0,
                data_output_0,
                div_by_zero_flag_output: div_by_zero_output,
                activation_output,
            } => AluPortsConfig {
                data_input_0: Some(data_input_0),
                data_input_1: Some(data_input_1),
                activation_input: Some(activation_input),
                data_output_0: Some(data_output_0),
                data_output_1: div_by_zero_output,
                activation_output: activation_output,
            },
            AluOperation::Neg {
                activation_input,
                input: data_input_0,
                data_output_0,
                activation_output,
            } => AluPortsConfig {
                data_input_0: Some(data_input_0),
                data_input_1: None,
                activation_input: Some(activation_input),
                data_output_0: Some(data_output_0),
                data_output_1: None,
                activation_output: activation_output,
            },
            AluOperation::ReadFromMem {
                activation_input,
                data_input_0: addr_input,
                data_output_0,
                activation_output,
            } => AluPortsConfig {
                data_input_0: Some(addr_input),
                data_input_1: None,
                activation_input: Some(activation_input),
                data_output_0: Some(data_output_0),
                data_output_1: None,
                activation_output: activation_output,
            },
            AluOperation::WriteToMem {
                activation_input,
                data_input,
                address_input,
                activation_output,
            } => AluPortsConfig {
                data_input_0: Some(data_input),
                data_input_1: Some(address_input),
                activation_input: Some(activation_input),
                data_output_0: None,
                data_output_1: None,
                activation_output,
            },
        }
    }
}
